name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version to deploy (e.g. 3)"
        required: true
      confirm:
        description: "Type 'DEPLOY' to confirm"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: inputs.confirm == 'DEPLOY'
    env:
      VERSION: ${{ github.event.inputs.version }}
      REGISTRY: cr.yandex/crpcntqudb0hkbbnds00/app

    steps:
      - name: Verify inputs
        run: |
          if [ -z "$VERSION" ]; then
            echo "::error::Version parameter is required"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify image exists
        run: |
          echo "${{ secrets.YC_CR_PASSWORD }}" | docker login -u oauth --password-stdin cr.yandex
          if ! docker manifest inspect $REGISTRY:${VERSION}_latest > /dev/null; then
            echo "::error::Image $REGISTRY:${VERSION}_latest does not exist in registry"
            exit 1
          fi

      - name: Find related issue
        id: find_issue
        run: |
          ISSUE_NUMBER=$(gh issue list --limit 1 --search "Release v$VERSION in:title" --json number --jq '.[0].number')
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

      - name: Deploy to Yandex VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -e
            echo "Starting deployment of version $VERSION"

            # Login and pull image
            docker login cr.yandex -u oauth -p "${{ secrets.YC_CR_PASSWORD }}"
            docker pull $REGISTRY:${VERSION}_latest

            # Stop and remove old container if exists
            docker stop shri-infra || echo "No running container to stop"
            docker rm shri-infra || echo "No container to remove"

            # Run new container
            docker run -d \
              --name shri-infra \
              --restart unless-stopped \
              -p 80:3000 \
              -e NODE_ENV=production \
              $REGISTRY:${VERSION}_latest

            echo "Deployment completed successfully"

      - name: Verify deployment
        run: |
          sleep 10  # Wait for app to start
          curl -sSf http://${{ secrets.VM_SSH_HOST }} || (echo "::error::Application not responding"; exit 1)

      - name: Comment on GitHub issue
        if: steps.find_issue.outputs.issue_number != ''
        run: |
          gh issue comment ${{ steps.find_issue.outputs.issue_number }} \
            --body "$(echo -e "ðŸš€ Release **v$VERSION** deployed to production\nðŸ“… $(date -u)\nðŸ‘¤ By @${{ github.actor }}\n\nApplication available at: http://${{ secrets.VM_SSH_HOST }}")"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail if no issue found
        if: steps.find_issue.outputs.issue_number == ''
        run: |
          echo "::error::No GitHub issue found for release v$VERSION"
          exit 1
